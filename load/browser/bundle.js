/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./load/browser/base.js":
/*!******************************!*\
  !*** ./load/browser/base.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const host = typeof window == 'undefined' ? __webpack_require__.g : window\n\nclass Site {\n  constructor(head, link) {\n    this.head = head\n    this.link = link\n    this.file = undefined\n    this.mesh = {}\n  }\n}\n\nclass Fork {\n  constructor(base, home, mark) {\n    this.mark = mark\n    this.base = base\n    this.home = home || (base ? base.home : null)\n    this.head = {}\n  }\n\n  fork(name, home) {\n    const fork = new Fork(this, home, name)\n    this.head[name] = fork\n    return fork\n  }\n\n  save(name, blob) {\n    const form = typeof blob\n    this.head[name] = {\n      form,\n      blob\n    }\n    return blob\n  }\n\n  read(...road) {\n    let fork = this\n    let i = 0\n    while (i < road.length) {\n      const name = road[i++]\n      fork = fork.head[name]\n    }\n    return fork\n  }\n}\n\nclass File extends Fork {\n  bind(task) {\n    this.host = task\n  }\n}\n\nclass Base {\n  constructor() {\n    this.mesh = {}\n  }\n\n  load(road) {\n    const list = road.split('/')\n    let size = 0\n    let mesh = this.mesh\n    let site\n    while (size < list.length) {\n      const link = list[size]\n      site = mesh[link] = mesh[link] || new Site(site, link)\n      mesh = site.mesh\n      size++\n    }\n\n    let file = site.file\n    if (!file) {\n      site.file = file = new File()\n      file.save('road', road)\n    }\n\n    return file\n  }\n\n  bind(road, task) {\n    task(this.load(road))\n    return this\n  }\n\n  link(road) {\n    const file = this.load(road)\n    if (file.host) file.host()\n  }\n\n  free(road) {\n    const list = road.split('/')\n    let size = 0\n    let mesh = this.mesh\n    let site\n    while (size < list.length) {\n      const link = list[size]\n      site = mesh[link]\n      if (site) {\n        mesh = site.mesh\n        size++\n      } else {\n        break\n      }\n    }\n    while (site) {\n      const head = site.head\n      delete head.mesh[site.link]\n      if (!Object.keys(head.mesh).length) {\n        site = head\n      } else {\n        break\n      }\n    }\n  }\n}\n\nhost.base = new Base\n\n\nbase.bind('@drumwork/base/test/dock/browser', file => {\n  const x1 = base.load('@drumwork/base/test/task/view')\n\n  let x2\n\n  file.bind(() => {\n    x2 = x1.read('task', 'mount-example-view')\n\n  })\n})\n\nbase.bind('@drumwork/base/test/task/view', file => {\n  const x1 = base.load('@drumwork/base/test/view/example')\n  const x2 = base.load('@drumwork/dock/code/javascript/console')\n  const x3 = base.load('@drumwork/base/code/dock/browser')\n  const x4 = base.load('@drumwork/base/code/dock/browser')\n\n  let x59\n  let x60\n  let x61\n  let x62\n  let x63\n  let x64\n  let x65\n\n  const x6 = file.fork('task')\n  const x7 = x6.fork('mount-example-view')\n  const x8 = x7.fork('base')\n  x8.save('form', 'task')\n  x8.save('name', 'mount-example-view')\n  x8.fork('base')\n  const x9 = x8.fork('zone')\n  const x10 = x9.fork('0')\n  x10.save('form', 'call')\n  x10.save('name', 'make-base')\n  x10.save('wait', false)\n  x10.fork('bind')\n  const x11 = x10.fork('zone')\n  const x12 = x11.fork('0')\n  x12.save('form', 'call-save')\n  const x13 = x12.fork('nest')\n  x13.save('form', 'nest')\n  const x14 = x13.fork('stem')\n  const x15 = x14.fork('0')\n  x15.save('form', 'term')\n  x15.save('name', 'b')\n  x10.fork('hook')\n  const x16 = x9.fork('1')\n  x16.save('form', 'call')\n  x16.save('name', 'make')\n  x16.save('wait', false)\n  const x17 = x16.fork('bind')\n  const x18 = x17.fork('0')\n  x18.save('form', 'bind')\n  x18.save('name', 'type')\n  const x19 = x18.fork('sift')\n  x19.save('form', 'link')\n  const x20 = x19.fork('nest')\n  x20.save('form', 'nest')\n  const x21 = x20.fork('stem')\n  const x22 = x21.fork('0')\n  x22.save('form', 'term')\n  x22.save('name', 'view')\n  const x23 = x21.fork('1')\n  x23.save('form', 'term')\n  x23.save('name', 'example')\n  const x24 = x16.fork('zone')\n  const x25 = x24.fork('0')\n  x25.save('form', 'call-save')\n  const x26 = x25.fork('nest')\n  x26.save('form', 'nest')\n  const x27 = x26.fork('stem')\n  const x28 = x27.fork('0')\n  x28.save('form', 'term')\n  x28.save('name', 'frag')\n  x16.fork('hook')\n  const x29 = x9.fork('2')\n  x29.save('form', 'call')\n  x29.save('name', 'log')\n  x29.save('wait', false)\n  const x30 = x29.fork('bind')\n  const x31 = x30.fork('0')\n  x31.save('form', 'bind')\n  x31.save('name', 'message')\n  const x32 = x31.fork('sift')\n  x32.save('form', 'link')\n  const x33 = x32.fork('nest')\n  x33.save('form', 'nest')\n  const x34 = x33.fork('stem')\n  const x35 = x34.fork('0')\n  x35.save('form', 'term')\n  x35.save('name', 'frag')\n  x29.fork('zone')\n  x29.fork('hook')\n  const x36 = x9.fork('3')\n  x36.save('form', 'call')\n  x36.save('name', 'bind-view')\n  x36.save('wait', false)\n  const x37 = x36.fork('bind')\n  const x38 = x37.fork('0')\n  x38.save('form', 'bind')\n  x38.save('name', 'list')\n  const x39 = x38.fork('sift')\n  x39.save('form', 'link')\n  const x40 = x39.fork('nest')\n  x40.save('form', 'nest')\n  const x41 = x40.fork('stem')\n  const x42 = x41.fork('0')\n  x42.save('form', 'term')\n  x42.save('name', 'frag')\n  const x43 = x37.fork('1')\n  x43.save('form', 'bind')\n  x43.save('name', 'base')\n  const x44 = x43.fork('sift')\n  x44.save('form', 'link')\n  const x45 = x44.fork('nest')\n  x45.save('form', 'nest')\n  const x46 = x45.fork('stem')\n  const x47 = x46.fork('0')\n  x47.save('form', 'term')\n  x47.save('name', 'b')\n  x36.fork('zone')\n  x36.fork('hook')\n  const x48 = x9.fork('4')\n  x48.save('form', 'call')\n  x48.save('name', 'draw-view')\n  x48.save('wait', false)\n  const x49 = x48.fork('bind')\n  const x50 = x49.fork('0')\n  x50.save('form', 'bind')\n  x50.save('name', 'mesh')\n  const x51 = x50.fork('sift')\n  x51.save('form', 'link')\n  const x52 = x51.fork('nest')\n  x52.save('form', 'nest')\n  const x53 = x52.fork('stem')\n  const x54 = x53.fork('0')\n  x54.save('form', 'term')\n  x54.save('name', 'frag')\n  x48.fork('zone')\n  x48.fork('hook')\n  const x55 = x9.fork('5')\n  x55.save('form', 'call')\n  x55.save('name', 'log')\n  x55.save('wait', false)\n  const x56 = x55.fork('bind')\n  const x57 = x56.fork('0')\n  x57.save('form', 'bind')\n  x57.save('name', 'message')\n  const x58 = x57.fork('sift')\n  x58.save('form', 'sift-text')\n  x58.save('text', 'done')\n  x55.fork('zone')\n  x55.fork('hook')\n  x8.save('wait', false)\n  x7.save('call', function(){\n    b = undefined(\n    \n    )\n    frag = undefined(\n      view[example]\n    )\n    undefined(\n      frag\n    )\n    undefined(\n      frag,\n      b\n    )\n    undefined(\n      frag\n    )\n    undefined(\n      'done'\n    )\n  })\n  file.bind(() => {\n    x59 = x1.read('view', 'example')\n    x60 = x4.read('task', 'log')\n    x61 = x7.read('task', 'make-base')\n    x62 = x7.read('task', 'load-view')\n    x63 = x7.read('task', 'bind-view')\n    x64 = x7.read('task', 'draw-view')\n    x65 = x16.read('task', 'make')\n\n  })\n})\n\nbase.bind('@drumwork/base/test/view/example', file => {\n  const x2 = file.fork('view')\n  const x3 = x2.fork('check')\n  x3.save('form', 'view')\n  x3.save('name', 'check')\n  x3.fork('base')\n  x3.fork('bond')\n  x3.fork('hook')\n  const x4 = x3.fork('zone')\n  const x5 = x4.fork('0')\n  x5.save('form', 'mesh')\n  x5.save('name', 'header')\n  x5.fork('bind')\n  x5.fork('vibe')\n  const x6 = x5.fork('zone')\n  const x7 = x6.fork('0')\n  x7.save('form', 'mesh')\n  x7.save('name', 'h2')\n  const x8 = x7.fork('bind')\n  const x9 = x8.fork('0')\n  x9.save('form', 'bind')\n  x9.save('name', 'text')\n  const x10 = x9.fork('sift')\n  x10.save('form', 'sift-text')\n  x10.save('text', 'foo bar')\n  x7.fork('vibe')\n  x7.fork('zone')\n  x7.fork('hook')\n  const x11 = x6.fork('1')\n  x11.save('form', 'mesh')\n  x11.save('name', 'div')\n  x11.fork('bind')\n  x11.fork('vibe')\n  const x12 = x11.fork('zone')\n  const x13 = x12.fork('0')\n  x13.save('form', 'mesh')\n  x13.save('name', 'h3')\n  const x14 = x13.fork('bind')\n  const x15 = x14.fork('0')\n  x15.save('form', 'bind')\n  x15.save('name', 'text')\n  const x16 = x15.fork('sift')\n  x16.save('form', 'sift-text')\n  x16.save('text', 'another')\n  x13.fork('vibe')\n  x13.fork('zone')\n  x13.fork('hook')\n  x11.fork('hook')\n  x5.fork('hook')\n  x3.fork('task')\n  const x17 = x2.fork('example')\n  x17.save('form', 'view')\n  x17.save('name', 'example')\n  x17.fork('base')\n  x17.fork('bond')\n  x17.fork('hook')\n  const x18 = x17.fork('zone')\n  const x19 = x18.fork('0')\n  x19.save('form', 'mesh')\n  x19.save('name', 'h1')\n  const x20 = x19.fork('bind')\n  const x21 = x20.fork('0')\n  x21.save('form', 'bind')\n  x21.save('name', 'fill')\n  const x22 = x21.fork('sift')\n  x22.save('form', 'sift-text')\n  x22.save('text', '#ff0000')\n  const x23 = x20.fork('1')\n  x23.save('form', 'bind')\n  x23.save('name', 'text-fill')\n  const x24 = x23.fork('sift')\n  x24.save('form', 'sift-text')\n  x24.save('text', 'white')\n  const x25 = x20.fork('2')\n  x25.save('form', 'bind')\n  x25.save('name', 'text')\n  const x26 = x25.fork('sift')\n  x26.save('form', 'sift-text')\n  x26.save('text', 'hello world')\n  const x27 = x19.fork('vibe')\n  const x28 = x27.fork('0')\n  x28.save('form', 'vibe')\n  x28.save('name', 'hover')\n  const x29 = x28.fork('bind')\n  const x30 = x29.fork('0')\n  x30.save('form', 'bind')\n  x30.save('name', 'fill')\n  const x31 = x30.fork('sift')\n  x31.save('form', 'sift-text')\n  x31.save('text', '#00ff00')\n  x28.fork('hook')\n  x19.fork('zone')\n  const x32 = x19.fork('hook')\n  const x33 = x32.fork('0')\n  x33.save('form', 'hook')\n  x33.save('name', 'click')\n  const x34 = x33.fork('base')\n  const x35 = x34.fork('0')\n  x35.save('form', 'task-base')\n  x35.save('name', 'event')\n  const x36 = x33.fork('zone')\n  const x37 = x36.fork('0')\n  x37.save('form', 'call')\n  x37.save('name', 'log')\n  x37.save('wait', false)\n  const x38 = x37.fork('bind')\n  const x39 = x38.fork('0')\n  x39.save('form', 'bind')\n  x39.save('name', 'message')\n  const x40 = x39.fork('sift')\n  x40.save('form', 'link')\n  const x41 = x40.fork('nest')\n  x41.save('form', 'nest')\n  const x42 = x41.fork('stem')\n  const x43 = x42.fork('0')\n  x43.save('form', 'term')\n  x43.save('name', 'event')\n  x37.fork('zone')\n  x37.fork('hook')\n  const x44 = x18.fork('1')\n  x44.save('form', 'mesh')\n  x44.save('name', 'check')\n  x44.fork('bind')\n  x44.fork('vibe')\n  x44.fork('zone')\n  x44.fork('hook')\n  x17.fork('task')\n})\n\nbase.bind('@drumwork/dock/code/javascript/console', file => {\n  const x2 = file.fork('task')\n  const x3 = x2.fork('assert')\n  const x4 = x3.fork('base')\n  x4.save('form', 'task')\n  x4.save('name', 'assert')\n  const x5 = x4.fork('base')\n  const x6 = x5.fork('0')\n  x6.save('form', 'task-base')\n  x6.save('name', 'assertion')\n  const x7 = x5.fork('1')\n  x7.save('form', 'task-base')\n  x7.save('name', 'obj1')\n  const x8 = x5.fork('2')\n  x8.save('form', 'task-base')\n  x8.save('name', 'msg')\n  const x9 = x5.fork('3')\n  x9.save('form', 'task-base')\n  x9.save('name', 'subst1')\n  const x10 = x4.fork('zone')\n  const x11 = x10.fork('0')\n  x11.save('form', 'call')\n  x11.save('name', 'call-base')\n  x11.save('wait', false)\n  const x12 = x11.fork('bind')\n  const x13 = x12.fork('0')\n  x13.save('form', 'bind')\n  x13.save('name', 'object')\n  const x14 = x13.fork('sift')\n  x14.save('form', 'sift-text')\n  x14.save('text', 'console')\n  const x15 = x12.fork('1')\n  x15.save('form', 'bind')\n  x15.save('name', 'method')\n  const x16 = x15.fork('sift')\n  x16.save('form', 'sift-text')\n  x16.save('text', 'assert')\n  const x17 = x12.fork('2')\n  x17.save('form', 'bind')\n  x17.save('name', 'factor')\n  const x18 = x17.fork('sift')\n  x18.save('form', 'link')\n  const x19 = x18.fork('nest')\n  x19.save('form', 'nest')\n  const x20 = x19.fork('stem')\n  const x21 = x20.fork('0')\n  x21.save('form', 'term')\n  x21.save('name', 'assertion')\n  const x22 = x12.fork('3')\n  x22.save('form', 'bind')\n  x22.save('name', 'factor')\n  const x23 = x22.fork('sift')\n  x23.save('form', 'link')\n  const x24 = x23.fork('nest')\n  x24.save('form', 'nest')\n  const x25 = x24.fork('stem')\n  const x26 = x25.fork('0')\n  x26.save('form', 'term')\n  x26.save('name', 'obj1')\n  const x27 = x12.fork('4')\n  x27.save('form', 'bind')\n  x27.save('name', 'factor')\n  const x28 = x27.fork('sift')\n  x28.save('form', 'link')\n  const x29 = x28.fork('nest')\n  x29.save('form', 'nest')\n  const x30 = x29.fork('stem')\n  const x31 = x30.fork('0')\n  x31.save('form', 'term')\n  x31.save('name', 'msg')\n  const x32 = x12.fork('5')\n  x32.save('form', 'bind')\n  x32.save('name', 'factor')\n  const x33 = x32.fork('sift')\n  x33.save('form', 'link')\n  const x34 = x33.fork('nest')\n  x34.save('form', 'nest')\n  const x35 = x34.fork('stem')\n  const x36 = x35.fork('0')\n  x36.save('form', 'term')\n  x36.save('name', 'subst1')\n  x11.fork('zone')\n  x11.fork('hook')\n  x4.save('wait', false)\n  x3.save('call', function(assertion, obj1, msg, subst1){\n    console.assert(assertion, obj1, msg, subst1)\n  })\n  const x37 = x2.fork('clear')\n  const x38 = x37.fork('base')\n  x38.save('form', 'task')\n  x38.save('name', 'clear')\n  x38.fork('base')\n  const x39 = x38.fork('zone')\n  const x40 = x39.fork('0')\n  x40.save('form', 'call')\n  x40.save('name', 'call-base')\n  x40.save('wait', false)\n  const x41 = x40.fork('bind')\n  const x42 = x41.fork('0')\n  x42.save('form', 'bind')\n  x42.save('name', 'object')\n  const x43 = x42.fork('sift')\n  x43.save('form', 'sift-text')\n  x43.save('text', 'console')\n  const x44 = x41.fork('1')\n  x44.save('form', 'bind')\n  x44.save('name', 'method')\n  const x45 = x44.fork('sift')\n  x45.save('form', 'sift-text')\n  x45.save('text', 'clear')\n  x40.fork('zone')\n  x40.fork('hook')\n  x38.save('wait', false)\n  x37.save('call', function(){\n    console.clear()\n  })\n  const x46 = x2.fork('count')\n  const x47 = x46.fork('base')\n  x47.save('form', 'task')\n  x47.save('name', 'count')\n  const x48 = x47.fork('base')\n  const x49 = x48.fork('0')\n  x49.save('form', 'task-base')\n  x49.save('name', 'label')\n  const x50 = x47.fork('zone')\n  const x51 = x50.fork('0')\n  x51.save('form', 'call')\n  x51.save('name', 'call-base')\n  x51.save('wait', false)\n  const x52 = x51.fork('bind')\n  const x53 = x52.fork('0')\n  x53.save('form', 'bind')\n  x53.save('name', 'object')\n  const x54 = x53.fork('sift')\n  x54.save('form', 'sift-text')\n  x54.save('text', 'console')\n  const x55 = x52.fork('1')\n  x55.save('form', 'bind')\n  x55.save('name', 'method')\n  const x56 = x55.fork('sift')\n  x56.save('form', 'sift-text')\n  x56.save('text', 'count')\n  const x57 = x52.fork('2')\n  x57.save('form', 'bind')\n  x57.save('name', 'factor')\n  const x58 = x57.fork('sift')\n  x58.save('form', 'link')\n  const x59 = x58.fork('nest')\n  x59.save('form', 'nest')\n  const x60 = x59.fork('stem')\n  const x61 = x60.fork('0')\n  x61.save('form', 'term')\n  x61.save('name', 'label')\n  x51.fork('zone')\n  x51.fork('hook')\n  x47.save('wait', false)\n  x46.save('call', function(label){\n    console.count(label)\n  })\n  const x62 = x2.fork('count-reset')\n  const x63 = x62.fork('base')\n  x63.save('form', 'task')\n  x63.save('name', 'count-reset')\n  const x64 = x63.fork('base')\n  const x65 = x64.fork('0')\n  x65.save('form', 'task-base')\n  x65.save('name', 'label')\n  const x66 = x63.fork('zone')\n  const x67 = x66.fork('0')\n  x67.save('form', 'call')\n  x67.save('name', 'call-base')\n  x67.save('wait', false)\n  const x68 = x67.fork('bind')\n  const x69 = x68.fork('0')\n  x69.save('form', 'bind')\n  x69.save('name', 'object')\n  const x70 = x69.fork('sift')\n  x70.save('form', 'sift-text')\n  x70.save('text', 'console')\n  const x71 = x68.fork('1')\n  x71.save('form', 'bind')\n  x71.save('name', 'method')\n  const x72 = x71.fork('sift')\n  x72.save('form', 'sift-text')\n  x72.save('text', 'countReset')\n  const x73 = x68.fork('2')\n  x73.save('form', 'bind')\n  x73.save('name', 'factor')\n  const x74 = x73.fork('sift')\n  x74.save('form', 'link')\n  const x75 = x74.fork('nest')\n  x75.save('form', 'nest')\n  const x76 = x75.fork('stem')\n  const x77 = x76.fork('0')\n  x77.save('form', 'term')\n  x77.save('name', 'label')\n  x67.fork('zone')\n  x67.fork('hook')\n  x63.save('wait', false)\n  x62.save('call', function(label){\n    console.countReset(label)\n  })\n  const x78 = x2.fork('debug')\n  const x79 = x78.fork('base')\n  x79.save('form', 'task')\n  x79.save('name', 'debug')\n  const x80 = x79.fork('base')\n  const x81 = x80.fork('0')\n  x81.save('form', 'task-base')\n  x81.save('name', 'obj1')\n  const x82 = x80.fork('1')\n  x82.save('form', 'task-base')\n  x82.save('name', 'msg')\n  const x83 = x80.fork('2')\n  x83.save('form', 'task-base')\n  x83.save('name', 'subst1')\n  const x84 = x79.fork('zone')\n  const x85 = x84.fork('0')\n  x85.save('form', 'call')\n  x85.save('name', 'call-base')\n  x85.save('wait', false)\n  const x86 = x85.fork('bind')\n  const x87 = x86.fork('0')\n  x87.save('form', 'bind')\n  x87.save('name', 'object')\n  const x88 = x87.fork('sift')\n  x88.save('form', 'sift-text')\n  x88.save('text', 'console')\n  const x89 = x86.fork('1')\n  x89.save('form', 'bind')\n  x89.save('name', 'method')\n  const x90 = x89.fork('sift')\n  x90.save('form', 'sift-text')\n  x90.save('text', 'debug')\n  const x91 = x86.fork('2')\n  x91.save('form', 'bind')\n  x91.save('name', 'factor')\n  const x92 = x91.fork('sift')\n  x92.save('form', 'link')\n  const x93 = x92.fork('nest')\n  x93.save('form', 'nest')\n  const x94 = x93.fork('stem')\n  const x95 = x94.fork('0')\n  x95.save('form', 'term')\n  x95.save('name', 'obj1')\n  const x96 = x86.fork('3')\n  x96.save('form', 'bind')\n  x96.save('name', 'factor')\n  const x97 = x96.fork('sift')\n  x97.save('form', 'link')\n  const x98 = x97.fork('nest')\n  x98.save('form', 'nest')\n  const x99 = x98.fork('stem')\n  const x100 = x99.fork('0')\n  x100.save('form', 'term')\n  x100.save('name', 'msg')\n  const x101 = x86.fork('4')\n  x101.save('form', 'bind')\n  x101.save('name', 'factor')\n  const x102 = x101.fork('sift')\n  x102.save('form', 'link')\n  const x103 = x102.fork('nest')\n  x103.save('form', 'nest')\n  const x104 = x103.fork('stem')\n  const x105 = x104.fork('0')\n  x105.save('form', 'term')\n  x105.save('name', 'subst1')\n  x85.fork('zone')\n  x85.fork('hook')\n  x79.save('wait', false)\n  x78.save('call', function(obj1, msg, subst1){\n    console.debug(obj1, msg, subst1)\n  })\n  const x106 = x2.fork('dir')\n  const x107 = x106.fork('base')\n  x107.save('form', 'task')\n  x107.save('name', 'dir')\n  const x108 = x107.fork('base')\n  const x109 = x108.fork('0')\n  x109.save('form', 'task-base')\n  x109.save('name', 'object')\n  const x110 = x107.fork('zone')\n  const x111 = x110.fork('0')\n  x111.save('form', 'call')\n  x111.save('name', 'call-base')\n  x111.save('wait', false)\n  const x112 = x111.fork('bind')\n  const x113 = x112.fork('0')\n  x113.save('form', 'bind')\n  x113.save('name', 'object')\n  const x114 = x113.fork('sift')\n  x114.save('form', 'sift-text')\n  x114.save('text', 'console')\n  const x115 = x112.fork('1')\n  x115.save('form', 'bind')\n  x115.save('name', 'method')\n  const x116 = x115.fork('sift')\n  x116.save('form', 'sift-text')\n  x116.save('text', 'dir')\n  const x117 = x112.fork('2')\n  x117.save('form', 'bind')\n  x117.save('name', 'factor')\n  const x118 = x117.fork('sift')\n  x118.save('form', 'link')\n  const x119 = x118.fork('nest')\n  x119.save('form', 'nest')\n  const x120 = x119.fork('stem')\n  const x121 = x120.fork('0')\n  x121.save('form', 'term')\n  x121.save('name', 'object')\n  x111.fork('zone')\n  x111.fork('hook')\n  x107.save('wait', false)\n  x106.save('call', function(object){\n    console.dir(object)\n  })\n  const x122 = x2.fork('dirxml')\n  const x123 = x122.fork('base')\n  x123.save('form', 'task')\n  x123.save('name', 'dirxml')\n  const x124 = x123.fork('base')\n  const x125 = x124.fork('0')\n  x125.save('form', 'task-base')\n  x125.save('name', 'object')\n  const x126 = x123.fork('zone')\n  const x127 = x126.fork('0')\n  x127.save('form', 'call')\n  x127.save('name', 'call-base')\n  x127.save('wait', false)\n  const x128 = x127.fork('bind')\n  const x129 = x128.fork('0')\n  x129.save('form', 'bind')\n  x129.save('name', 'object')\n  const x130 = x129.fork('sift')\n  x130.save('form', 'sift-text')\n  x130.save('text', 'console')\n  const x131 = x128.fork('1')\n  x131.save('form', 'bind')\n  x131.save('name', 'method')\n  const x132 = x131.fork('sift')\n  x132.save('form', 'sift-text')\n  x132.save('text', 'dirxml')\n  const x133 = x128.fork('2')\n  x133.save('form', 'bind')\n  x133.save('name', 'factor')\n  const x134 = x133.fork('sift')\n  x134.save('form', 'link')\n  const x135 = x134.fork('nest')\n  x135.save('form', 'nest')\n  const x136 = x135.fork('stem')\n  const x137 = x136.fork('0')\n  x137.save('form', 'term')\n  x137.save('name', 'object')\n  x127.fork('zone')\n  x127.fork('hook')\n  x123.save('wait', false)\n  x122.save('call', function(object){\n    console.dirxml(object)\n  })\n  const x138 = x2.fork('error')\n  const x139 = x138.fork('base')\n  x139.save('form', 'task')\n  x139.save('name', 'error')\n  const x140 = x139.fork('base')\n  const x141 = x140.fork('0')\n  x141.save('form', 'task-base')\n  x141.save('name', 'obj1')\n  const x142 = x140.fork('1')\n  x142.save('form', 'task-base')\n  x142.save('name', 'msg')\n  const x143 = x140.fork('2')\n  x143.save('form', 'task-base')\n  x143.save('name', 'subst1')\n  const x144 = x139.fork('zone')\n  const x145 = x144.fork('0')\n  x145.save('form', 'call')\n  x145.save('name', 'call-base')\n  x145.save('wait', false)\n  const x146 = x145.fork('bind')\n  const x147 = x146.fork('0')\n  x147.save('form', 'bind')\n  x147.save('name', 'object')\n  const x148 = x147.fork('sift')\n  x148.save('form', 'sift-text')\n  x148.save('text', 'console')\n  const x149 = x146.fork('1')\n  x149.save('form', 'bind')\n  x149.save('name', 'method')\n  const x150 = x149.fork('sift')\n  x150.save('form', 'sift-text')\n  x150.save('text', 'error')\n  const x151 = x146.fork('2')\n  x151.save('form', 'bind')\n  x151.save('name', 'factor')\n  const x152 = x151.fork('sift')\n  x152.save('form', 'link')\n  const x153 = x152.fork('nest')\n  x153.save('form', 'nest')\n  const x154 = x153.fork('stem')\n  const x155 = x154.fork('0')\n  x155.save('form', 'term')\n  x155.save('name', 'obj1')\n  const x156 = x146.fork('3')\n  x156.save('form', 'bind')\n  x156.save('name', 'factor')\n  const x157 = x156.fork('sift')\n  x157.save('form', 'link')\n  const x158 = x157.fork('nest')\n  x158.save('form', 'nest')\n  const x159 = x158.fork('stem')\n  const x160 = x159.fork('0')\n  x160.save('form', 'term')\n  x160.save('name', 'msg')\n  const x161 = x146.fork('4')\n  x161.save('form', 'bind')\n  x161.save('name', 'factor')\n  const x162 = x161.fork('sift')\n  x162.save('form', 'link')\n  const x163 = x162.fork('nest')\n  x163.save('form', 'nest')\n  const x164 = x163.fork('stem')\n  const x165 = x164.fork('0')\n  x165.save('form', 'term')\n  x165.save('name', 'subst1')\n  x145.fork('zone')\n  x145.fork('hook')\n  x139.save('wait', false)\n  x138.save('call', function(obj1, msg, subst1){\n    console.error(obj1, msg, subst1)\n  })\n  const x166 = x2.fork('group')\n  const x167 = x166.fork('base')\n  x167.save('form', 'task')\n  x167.save('name', 'group')\n  const x168 = x167.fork('base')\n  const x169 = x168.fork('0')\n  x169.save('form', 'task-base')\n  x169.save('name', 'label')\n  const x170 = x167.fork('zone')\n  const x171 = x170.fork('0')\n  x171.save('form', 'call')\n  x171.save('name', 'call-base')\n  x171.save('wait', false)\n  const x172 = x171.fork('bind')\n  const x173 = x172.fork('0')\n  x173.save('form', 'bind')\n  x173.save('name', 'object')\n  const x174 = x173.fork('sift')\n  x174.save('form', 'sift-text')\n  x174.save('text', 'console')\n  const x175 = x172.fork('1')\n  x175.save('form', 'bind')\n  x175.save('name', 'method')\n  const x176 = x175.fork('sift')\n  x176.save('form', 'sift-text')\n  x176.save('text', 'group')\n  const x177 = x172.fork('2')\n  x177.save('form', 'bind')\n  x177.save('name', 'factor')\n  const x178 = x177.fork('sift')\n  x178.save('form', 'link')\n  const x179 = x178.fork('nest')\n  x179.save('form', 'nest')\n  const x180 = x179.fork('stem')\n  const x181 = x180.fork('0')\n  x181.save('form', 'term')\n  x181.save('name', 'label')\n  x171.fork('zone')\n  x171.fork('hook')\n  x167.save('wait', false)\n  x166.save('call', function(label){\n    console.group(label)\n  })\n  const x182 = x2.fork('group-collapsed')\n  const x183 = x182.fork('base')\n  x183.save('form', 'task')\n  x183.save('name', 'group-collapsed')\n  const x184 = x183.fork('base')\n  const x185 = x184.fork('0')\n  x185.save('form', 'task-base')\n  x185.save('name', 'label')\n  const x186 = x183.fork('zone')\n  const x187 = x186.fork('0')\n  x187.save('form', 'call')\n  x187.save('name', 'call-base')\n  x187.save('wait', false)\n  const x188 = x187.fork('bind')\n  const x189 = x188.fork('0')\n  x189.save('form', 'bind')\n  x189.save('name', 'object')\n  const x190 = x189.fork('sift')\n  x190.save('form', 'sift-text')\n  x190.save('text', 'console')\n  const x191 = x188.fork('1')\n  x191.save('form', 'bind')\n  x191.save('name', 'method')\n  const x192 = x191.fork('sift')\n  x192.save('form', 'sift-text')\n  x192.save('text', 'groupCollapsed')\n  const x193 = x188.fork('2')\n  x193.save('form', 'bind')\n  x193.save('name', 'factor')\n  const x194 = x193.fork('sift')\n  x194.save('form', 'link')\n  const x195 = x194.fork('nest')\n  x195.save('form', 'nest')\n  const x196 = x195.fork('stem')\n  const x197 = x196.fork('0')\n  x197.save('form', 'term')\n  x197.save('name', 'label')\n  x187.fork('zone')\n  x187.fork('hook')\n  x183.save('wait', false)\n  x182.save('call', function(label){\n    console.groupCollapsed(label)\n  })\n  const x198 = x2.fork('group-end')\n  const x199 = x198.fork('base')\n  x199.save('form', 'task')\n  x199.save('name', 'group-end')\n  x199.fork('base')\n  const x200 = x199.fork('zone')\n  const x201 = x200.fork('0')\n  x201.save('form', 'call')\n  x201.save('name', 'call-base')\n  x201.save('wait', false)\n  const x202 = x201.fork('bind')\n  const x203 = x202.fork('0')\n  x203.save('form', 'bind')\n  x203.save('name', 'object')\n  const x204 = x203.fork('sift')\n  x204.save('form', 'sift-text')\n  x204.save('text', 'console')\n  const x205 = x202.fork('1')\n  x205.save('form', 'bind')\n  x205.save('name', 'method')\n  const x206 = x205.fork('sift')\n  x206.save('form', 'sift-text')\n  x206.save('text', 'groupEnd')\n  x201.fork('zone')\n  x201.fork('hook')\n  x199.save('wait', false)\n  x198.save('call', function(){\n    console.groupEnd()\n  })\n  const x207 = x2.fork('info')\n  const x208 = x207.fork('base')\n  x208.save('form', 'task')\n  x208.save('name', 'info')\n  const x209 = x208.fork('base')\n  const x210 = x209.fork('0')\n  x210.save('form', 'task-base')\n  x210.save('name', 'obj1')\n  const x211 = x209.fork('1')\n  x211.save('form', 'task-base')\n  x211.save('name', 'msg')\n  const x212 = x209.fork('2')\n  x212.save('form', 'task-base')\n  x212.save('name', 'subst1')\n  const x213 = x208.fork('zone')\n  const x214 = x213.fork('0')\n  x214.save('form', 'call')\n  x214.save('name', 'call-base')\n  x214.save('wait', false)\n  const x215 = x214.fork('bind')\n  const x216 = x215.fork('0')\n  x216.save('form', 'bind')\n  x216.save('name', 'object')\n  const x217 = x216.fork('sift')\n  x217.save('form', 'sift-text')\n  x217.save('text', 'console')\n  const x218 = x215.fork('1')\n  x218.save('form', 'bind')\n  x218.save('name', 'method')\n  const x219 = x218.fork('sift')\n  x219.save('form', 'sift-text')\n  x219.save('text', 'info')\n  const x220 = x215.fork('2')\n  x220.save('form', 'bind')\n  x220.save('name', 'factor')\n  const x221 = x220.fork('sift')\n  x221.save('form', 'link')\n  const x222 = x221.fork('nest')\n  x222.save('form', 'nest')\n  const x223 = x222.fork('stem')\n  const x224 = x223.fork('0')\n  x224.save('form', 'term')\n  x224.save('name', 'obj1')\n  const x225 = x215.fork('3')\n  x225.save('form', 'bind')\n  x225.save('name', 'factor')\n  const x226 = x225.fork('sift')\n  x226.save('form', 'link')\n  const x227 = x226.fork('nest')\n  x227.save('form', 'nest')\n  const x228 = x227.fork('stem')\n  const x229 = x228.fork('0')\n  x229.save('form', 'term')\n  x229.save('name', 'msg')\n  const x230 = x215.fork('4')\n  x230.save('form', 'bind')\n  x230.save('name', 'factor')\n  const x231 = x230.fork('sift')\n  x231.save('form', 'link')\n  const x232 = x231.fork('nest')\n  x232.save('form', 'nest')\n  const x233 = x232.fork('stem')\n  const x234 = x233.fork('0')\n  x234.save('form', 'term')\n  x234.save('name', 'subst1')\n  x214.fork('zone')\n  x214.fork('hook')\n  x208.save('wait', false)\n  x207.save('call', function(obj1, msg, subst1){\n    console.info(obj1, msg, subst1)\n  })\n  const x235 = x2.fork('log')\n  const x236 = x235.fork('base')\n  x236.save('form', 'task')\n  x236.save('name', 'log')\n  const x237 = x236.fork('base')\n  const x238 = x237.fork('0')\n  x238.save('form', 'task-base')\n  x238.save('name', 'message')\n  const x239 = x236.fork('zone')\n  const x240 = x239.fork('0')\n  x240.save('form', 'call')\n  x240.save('name', 'call-base')\n  x240.save('wait', false)\n  const x241 = x240.fork('bind')\n  const x242 = x241.fork('0')\n  x242.save('form', 'bind')\n  x242.save('name', 'object')\n  const x243 = x242.fork('sift')\n  x243.save('form', 'sift-text')\n  x243.save('text', 'console')\n  const x244 = x241.fork('1')\n  x244.save('form', 'bind')\n  x244.save('name', 'method')\n  const x245 = x244.fork('sift')\n  x245.save('form', 'sift-text')\n  x245.save('text', 'log')\n  const x246 = x241.fork('2')\n  x246.save('form', 'bind')\n  x246.save('name', 'factor')\n  const x247 = x246.fork('sift')\n  x247.save('form', 'link')\n  const x248 = x247.fork('nest')\n  x248.save('form', 'nest')\n  const x249 = x248.fork('stem')\n  const x250 = x249.fork('0')\n  x250.save('form', 'term')\n  x250.save('name', 'message')\n  x240.fork('zone')\n  x240.fork('hook')\n  x236.save('wait', false)\n  x235.save('call', function(message){\n    console.log(message)\n  })\n  const x251 = x2.fork('table')\n  const x252 = x251.fork('base')\n  x252.save('form', 'task')\n  x252.save('name', 'table')\n  const x253 = x252.fork('base')\n  const x254 = x253.fork('0')\n  x254.save('form', 'task-base')\n  x254.save('name', 'data')\n  const x255 = x253.fork('1')\n  x255.save('form', 'task-base')\n  x255.save('name', 'columns')\n  const x256 = x252.fork('zone')\n  const x257 = x256.fork('0')\n  x257.save('form', 'call')\n  x257.save('name', 'call-base')\n  x257.save('wait', false)\n  const x258 = x257.fork('bind')\n  const x259 = x258.fork('0')\n  x259.save('form', 'bind')\n  x259.save('name', 'object')\n  const x260 = x259.fork('sift')\n  x260.save('form', 'sift-text')\n  x260.save('text', 'console')\n  const x261 = x258.fork('1')\n  x261.save('form', 'bind')\n  x261.save('name', 'method')\n  const x262 = x261.fork('sift')\n  x262.save('form', 'sift-text')\n  x262.save('text', 'table')\n  const x263 = x258.fork('2')\n  x263.save('form', 'bind')\n  x263.save('name', 'factor')\n  const x264 = x263.fork('sift')\n  x264.save('form', 'link')\n  const x265 = x264.fork('nest')\n  x265.save('form', 'nest')\n  const x266 = x265.fork('stem')\n  const x267 = x266.fork('0')\n  x267.save('form', 'term')\n  x267.save('name', 'data')\n  const x268 = x258.fork('3')\n  x268.save('form', 'bind')\n  x268.save('name', 'factor')\n  const x269 = x268.fork('sift')\n  x269.save('form', 'link')\n  const x270 = x269.fork('nest')\n  x270.save('form', 'nest')\n  const x271 = x270.fork('stem')\n  const x272 = x271.fork('0')\n  x272.save('form', 'term')\n  x272.save('name', 'columns')\n  x257.fork('zone')\n  x257.fork('hook')\n  x252.save('wait', false)\n  x251.save('call', function(data, columns){\n    console.table(data, columns)\n  })\n  const x273 = x2.fork('time')\n  const x274 = x273.fork('base')\n  x274.save('form', 'task')\n  x274.save('name', 'time')\n  const x275 = x274.fork('base')\n  const x276 = x275.fork('0')\n  x276.save('form', 'task-base')\n  x276.save('name', 'label')\n  const x277 = x274.fork('zone')\n  const x278 = x277.fork('0')\n  x278.save('form', 'call')\n  x278.save('name', 'call-base')\n  x278.save('wait', false)\n  const x279 = x278.fork('bind')\n  const x280 = x279.fork('0')\n  x280.save('form', 'bind')\n  x280.save('name', 'object')\n  const x281 = x280.fork('sift')\n  x281.save('form', 'sift-text')\n  x281.save('text', 'console')\n  const x282 = x279.fork('1')\n  x282.save('form', 'bind')\n  x282.save('name', 'method')\n  const x283 = x282.fork('sift')\n  x283.save('form', 'sift-text')\n  x283.save('text', 'time')\n  const x284 = x279.fork('2')\n  x284.save('form', 'bind')\n  x284.save('name', 'factor')\n  const x285 = x284.fork('sift')\n  x285.save('form', 'link')\n  const x286 = x285.fork('nest')\n  x286.save('form', 'nest')\n  const x287 = x286.fork('stem')\n  const x288 = x287.fork('0')\n  x288.save('form', 'term')\n  x288.save('name', 'label')\n  x278.fork('zone')\n  x278.fork('hook')\n  x274.save('wait', false)\n  x273.save('call', function(label){\n    console.time(label)\n  })\n  const x289 = x2.fork('time-end')\n  const x290 = x289.fork('base')\n  x290.save('form', 'task')\n  x290.save('name', 'time-end')\n  const x291 = x290.fork('base')\n  const x292 = x291.fork('0')\n  x292.save('form', 'task-base')\n  x292.save('name', 'label')\n  const x293 = x290.fork('zone')\n  const x294 = x293.fork('0')\n  x294.save('form', 'call')\n  x294.save('name', 'call-base')\n  x294.save('wait', false)\n  const x295 = x294.fork('bind')\n  const x296 = x295.fork('0')\n  x296.save('form', 'bind')\n  x296.save('name', 'object')\n  const x297 = x296.fork('sift')\n  x297.save('form', 'sift-text')\n  x297.save('text', 'console')\n  const x298 = x295.fork('1')\n  x298.save('form', 'bind')\n  x298.save('name', 'method')\n  const x299 = x298.fork('sift')\n  x299.save('form', 'sift-text')\n  x299.save('text', 'timeEnd')\n  const x300 = x295.fork('2')\n  x300.save('form', 'bind')\n  x300.save('name', 'factor')\n  const x301 = x300.fork('sift')\n  x301.save('form', 'link')\n  const x302 = x301.fork('nest')\n  x302.save('form', 'nest')\n  const x303 = x302.fork('stem')\n  const x304 = x303.fork('0')\n  x304.save('form', 'term')\n  x304.save('name', 'label')\n  x294.fork('zone')\n  x294.fork('hook')\n  x290.save('wait', false)\n  x289.save('call', function(label){\n    console.timeEnd(label)\n  })\n  const x305 = x2.fork('time-log')\n  const x306 = x305.fork('base')\n  x306.save('form', 'task')\n  x306.save('name', 'time-log')\n  const x307 = x306.fork('base')\n  const x308 = x307.fork('0')\n  x308.save('form', 'task-base')\n  x308.save('name', 'label')\n  const x309 = x306.fork('zone')\n  const x310 = x309.fork('0')\n  x310.save('form', 'call')\n  x310.save('name', 'call-base')\n  x310.save('wait', false)\n  const x311 = x310.fork('bind')\n  const x312 = x311.fork('0')\n  x312.save('form', 'bind')\n  x312.save('name', 'object')\n  const x313 = x312.fork('sift')\n  x313.save('form', 'sift-text')\n  x313.save('text', 'console')\n  const x314 = x311.fork('1')\n  x314.save('form', 'bind')\n  x314.save('name', 'method')\n  const x315 = x314.fork('sift')\n  x315.save('form', 'sift-text')\n  x315.save('text', 'timeLog')\n  const x316 = x311.fork('2')\n  x316.save('form', 'bind')\n  x316.save('name', 'factor')\n  const x317 = x316.fork('sift')\n  x317.save('form', 'link')\n  const x318 = x317.fork('nest')\n  x318.save('form', 'nest')\n  const x319 = x318.fork('stem')\n  const x320 = x319.fork('0')\n  x320.save('form', 'term')\n  x320.save('name', 'label')\n  x310.fork('zone')\n  x310.fork('hook')\n  x306.save('wait', false)\n  x305.save('call', function(label){\n    console.timeLog(label)\n  })\n  const x321 = x2.fork('trace')\n  const x322 = x321.fork('base')\n  x322.save('form', 'task')\n  x322.save('name', 'trace')\n  const x323 = x322.fork('base')\n  const x324 = x323.fork('0')\n  x324.save('form', 'task-base')\n  x324.save('name', 'any')\n  const x325 = x322.fork('zone')\n  const x326 = x325.fork('0')\n  x326.save('form', 'call')\n  x326.save('name', 'call-base')\n  x326.save('wait', false)\n  const x327 = x326.fork('bind')\n  const x328 = x327.fork('0')\n  x328.save('form', 'bind')\n  x328.save('name', 'object')\n  const x329 = x328.fork('sift')\n  x329.save('form', 'sift-text')\n  x329.save('text', 'console')\n  const x330 = x327.fork('1')\n  x330.save('form', 'bind')\n  x330.save('name', 'method')\n  const x331 = x330.fork('sift')\n  x331.save('form', 'sift-text')\n  x331.save('text', 'trace')\n  const x332 = x327.fork('2')\n  x332.save('form', 'bind')\n  x332.save('name', 'factor')\n  const x333 = x332.fork('sift')\n  x333.save('form', 'link')\n  const x334 = x333.fork('nest')\n  x334.save('form', 'nest')\n  const x335 = x334.fork('stem')\n  const x336 = x335.fork('0')\n  x336.save('form', 'term')\n  x336.save('name', 'any')\n  x326.fork('zone')\n  x326.fork('hook')\n  x322.save('wait', false)\n  x321.save('call', function(any){\n    console.trace(any)\n  })\n  const x337 = x2.fork('warn')\n  const x338 = x337.fork('base')\n  x338.save('form', 'task')\n  x338.save('name', 'warn')\n  const x339 = x338.fork('base')\n  const x340 = x339.fork('0')\n  x340.save('form', 'task-base')\n  x340.save('name', 'obj1')\n  const x341 = x339.fork('1')\n  x341.save('form', 'task-base')\n  x341.save('name', 'msg')\n  const x342 = x339.fork('2')\n  x342.save('form', 'task-base')\n  x342.save('name', 'subst1')\n  const x343 = x338.fork('zone')\n  const x344 = x343.fork('0')\n  x344.save('form', 'call')\n  x344.save('name', 'call-base')\n  x344.save('wait', false)\n  const x345 = x344.fork('bind')\n  const x346 = x345.fork('0')\n  x346.save('form', 'bind')\n  x346.save('name', 'object')\n  const x347 = x346.fork('sift')\n  x347.save('form', 'sift-text')\n  x347.save('text', 'console')\n  const x348 = x345.fork('1')\n  x348.save('form', 'bind')\n  x348.save('name', 'method')\n  const x349 = x348.fork('sift')\n  x349.save('form', 'sift-text')\n  x349.save('text', 'warn')\n  const x350 = x345.fork('2')\n  x350.save('form', 'bind')\n  x350.save('name', 'factor')\n  const x351 = x350.fork('sift')\n  x351.save('form', 'link')\n  const x352 = x351.fork('nest')\n  x352.save('form', 'nest')\n  const x353 = x352.fork('stem')\n  const x354 = x353.fork('0')\n  x354.save('form', 'term')\n  x354.save('name', 'obj1')\n  const x355 = x345.fork('3')\n  x355.save('form', 'bind')\n  x355.save('name', 'factor')\n  const x356 = x355.fork('sift')\n  x356.save('form', 'link')\n  const x357 = x356.fork('nest')\n  x357.save('form', 'nest')\n  const x358 = x357.fork('stem')\n  const x359 = x358.fork('0')\n  x359.save('form', 'term')\n  x359.save('name', 'msg')\n  const x360 = x345.fork('4')\n  x360.save('form', 'bind')\n  x360.save('name', 'factor')\n  const x361 = x360.fork('sift')\n  x361.save('form', 'link')\n  const x362 = x361.fork('nest')\n  x362.save('form', 'nest')\n  const x363 = x362.fork('stem')\n  const x364 = x363.fork('0')\n  x364.save('form', 'term')\n  x364.save('name', 'subst1')\n  x344.fork('zone')\n  x344.fork('hook')\n  x338.save('wait', false)\n  x337.save('call', function(obj1, msg, subst1){\n    console.warn(obj1, msg, subst1)\n  })\n})\n\nbase.bind('@drumwork/base/code/dock/browser', file => {\n  const x1 = base.load('@drumwork/dock/code/javascript/module')\n\n  let x104\n\n  const x3 = file.fork('task')\n  const x4 = x3.fork('make-base')\n  const x5 = x4.fork('base')\n  x5.save('form', 'task')\n  x5.save('name', 'make-base')\n  x5.fork('base')\n  const x6 = x5.fork('zone')\n  const x7 = x6.fork('0')\n  x7.save('form', 'call')\n  x7.save('name', 'call-base')\n  x7.save('wait', false)\n  const x8 = x7.fork('bind')\n  const x9 = x8.fork('0')\n  x9.save('form', 'bind')\n  x9.save('name', 'object')\n  const x10 = x9.fork('sift')\n  x10.save('form', 'link')\n  const x11 = x10.fork('nest')\n  x11.save('form', 'nest')\n  const x12 = x11.fork('stem')\n  const x13 = x12.fork('0')\n  x13.save('form', 'term')\n  x13.save('name', 'rise-base')\n  const x14 = x8.fork('1')\n  x14.save('form', 'bind')\n  x14.save('name', 'method')\n  const x15 = x14.fork('sift')\n  x15.save('form', 'sift-text')\n  x15.save('text', 'make')\n  const x16 = x7.fork('zone')\n  const x17 = x16.fork('0')\n  x17.save('form', 'call-turn')\n  x17.save('name', 'seed')\n  x7.fork('hook')\n  x5.save('wait', false)\n  x4.save('call', function(){\n    return rise-base.make()\n  })\n  const x18 = x3.fork('make')\n  const x19 = x18.fork('base')\n  x19.save('form', 'task')\n  x19.save('name', 'make')\n  const x20 = x19.fork('base')\n  const x21 = x20.fork('0')\n  x21.save('form', 'task-base')\n  x21.save('name', 'type')\n  const x22 = x19.fork('zone')\n  const x23 = x22.fork('0')\n  x23.save('form', 'call')\n  x23.save('name', 'call-base')\n  x23.save('wait', false)\n  const x24 = x23.fork('bind')\n  const x25 = x24.fork('0')\n  x25.save('form', 'bind')\n  x25.save('name', 'object')\n  const x26 = x25.fork('sift')\n  x26.save('form', 'link')\n  const x27 = x26.fork('nest')\n  x27.save('form', 'nest')\n  const x28 = x27.fork('stem')\n  const x29 = x28.fork('0')\n  x29.save('form', 'term')\n  x29.save('name', 'rise-make')\n  const x30 = x24.fork('1')\n  x30.save('form', 'bind')\n  x30.save('name', 'method')\n  const x31 = x30.fork('sift')\n  x31.save('form', 'sift-text')\n  x31.save('text', 'make')\n  const x32 = x24.fork('2')\n  x32.save('form', 'bind')\n  x32.save('name', 'factor')\n  const x33 = x32.fork('sift')\n  x33.save('form', 'link')\n  const x34 = x33.fork('nest')\n  x34.save('form', 'nest')\n  const x35 = x34.fork('stem')\n  const x36 = x35.fork('0')\n  x36.save('form', 'term')\n  x36.save('name', 'type')\n  const x37 = x23.fork('zone')\n  const x38 = x37.fork('0')\n  x38.save('form', 'call-turn')\n  x38.save('name', 'seed')\n  x23.fork('hook')\n  x19.save('wait', false)\n  x18.save('call', function(type){\n    return rise-make.make(type)\n  })\n  const x39 = x3.fork('bind-view')\n  const x40 = x39.fork('base')\n  x40.save('form', 'task')\n  x40.save('name', 'bind-view')\n  const x41 = x40.fork('base')\n  const x42 = x41.fork('0')\n  x42.save('form', 'task-base')\n  x42.save('name', 'list')\n  const x43 = x41.fork('1')\n  x43.save('form', 'task-base')\n  x43.save('name', 'base')\n  const x44 = x40.fork('zone')\n  const x45 = x44.fork('0')\n  x45.save('form', 'call')\n  x45.save('name', 'call-base')\n  x45.save('wait', false)\n  const x46 = x45.fork('bind')\n  const x47 = x46.fork('0')\n  x47.save('form', 'bind')\n  x47.save('name', 'object')\n  const x48 = x47.fork('sift')\n  x48.save('form', 'link')\n  const x49 = x48.fork('nest')\n  x49.save('form', 'nest')\n  const x50 = x49.fork('stem')\n  const x51 = x50.fork('0')\n  x51.save('form', 'term')\n  x51.save('name', 'rise-mesh')\n  const x52 = x46.fork('1')\n  x52.save('form', 'bind')\n  x52.save('name', 'method')\n  const x53 = x52.fork('sift')\n  x53.save('form', 'sift-text')\n  x53.save('text', 'bind')\n  const x54 = x46.fork('2')\n  x54.save('form', 'bind')\n  x54.save('name', 'factor')\n  const x55 = x54.fork('sift')\n  x55.save('form', 'link')\n  const x56 = x55.fork('nest')\n  x56.save('form', 'nest')\n  const x57 = x56.fork('stem')\n  const x58 = x57.fork('0')\n  x58.save('form', 'term')\n  x58.save('name', 'list')\n  const x59 = x46.fork('3')\n  x59.save('form', 'bind')\n  x59.save('name', 'factor')\n  const x60 = x59.fork('sift')\n  x60.save('form', 'link')\n  const x61 = x60.fork('nest')\n  x61.save('form', 'nest')\n  const x62 = x61.fork('stem')\n  const x63 = x62.fork('0')\n  x63.save('form', 'term')\n  x63.save('name', 'base')\n  x45.fork('zone')\n  x45.fork('hook')\n  x40.save('wait', false)\n  x39.save('call', function(list, base){\n    rise-mesh.bind(list, base)\n  })\n  const x64 = x3.fork('draw-view')\n  const x65 = x64.fork('base')\n  x65.save('form', 'task')\n  x65.save('name', 'draw-view')\n  const x66 = x65.fork('base')\n  const x67 = x66.fork('0')\n  x67.save('form', 'task-base')\n  x67.save('name', 'mesh')\n  const x68 = x65.fork('zone')\n  const x69 = x68.fork('0')\n  x69.save('form', 'call')\n  x69.save('name', 'call-base')\n  x69.save('wait', false)\n  const x70 = x69.fork('bind')\n  const x71 = x70.fork('0')\n  x71.save('form', 'bind')\n  x71.save('name', 'object')\n  const x72 = x71.fork('sift')\n  x72.save('form', 'link')\n  const x73 = x72.fork('nest')\n  x73.save('form', 'nest')\n  const x74 = x73.fork('stem')\n  const x75 = x74.fork('0')\n  x75.save('form', 'term')\n  x75.save('name', 'rise-mesh')\n  const x76 = x70.fork('1')\n  x76.save('form', 'bind')\n  x76.save('name', 'method')\n  const x77 = x76.fork('sift')\n  x77.save('form', 'sift-text')\n  x77.save('text', 'draw')\n  const x78 = x70.fork('2')\n  x78.save('form', 'bind')\n  x78.save('name', 'factor')\n  const x79 = x78.fork('sift')\n  x79.save('form', 'link')\n  const x80 = x79.fork('nest')\n  x80.save('form', 'nest')\n  const x81 = x80.fork('stem')\n  const x82 = x81.fork('0')\n  x82.save('form', 'term')\n  x82.save('name', 'mesh')\n  x69.fork('zone')\n  x69.fork('hook')\n  x65.save('wait', false)\n  x64.save('call', function(mesh){\n    rise-mesh.draw(mesh)\n  })\n  const x83 = x3.fork('create-mesh')\n  const x84 = x83.fork('base')\n  x84.save('form', 'task')\n  x84.save('name', 'create-mesh')\n  const x85 = x84.fork('base')\n  const x86 = x85.fork('0')\n  x86.save('form', 'task-base')\n  x86.save('name', 'view')\n  const x87 = x84.fork('zone')\n  const x88 = x87.fork('0')\n  x88.save('form', 'call')\n  x88.save('name', 'call-base')\n  x88.save('wait', false)\n  const x89 = x88.fork('bind')\n  const x90 = x89.fork('0')\n  x90.save('form', 'bind')\n  x90.save('name', 'object')\n  const x91 = x90.fork('sift')\n  x91.save('form', 'link')\n  const x92 = x91.fork('nest')\n  x92.save('form', 'nest')\n  const x93 = x92.fork('stem')\n  const x94 = x93.fork('0')\n  x94.save('form', 'term')\n  x94.save('name', 'rise-mesh')\n  const x95 = x89.fork('1')\n  x95.save('form', 'bind')\n  x95.save('name', 'method')\n  const x96 = x95.fork('sift')\n  x96.save('form', 'sift-text')\n  x96.save('text', 'createMesh')\n  const x97 = x89.fork('2')\n  x97.save('form', 'bind')\n  x97.save('name', 'factor')\n  const x98 = x97.fork('sift')\n  x98.save('form', 'link')\n  const x99 = x98.fork('nest')\n  x99.save('form', 'nest')\n  const x100 = x99.fork('stem')\n  const x101 = x100.fork('0')\n  x101.save('form', 'term')\n  x101.save('name', 'view')\n  const x102 = x88.fork('zone')\n  const x103 = x102.fork('0')\n  x103.save('form', 'call-turn')\n  x103.save('name', 'seed')\n  x88.fork('hook')\n  x84.save('wait', false)\n  x83.save('call', function(view){\n    return rise-mesh.createMesh(view)\n  })\n  file.bind(() => {\n    x104 = x1.read('task', 'require')\n\n  })\n})\n\nbase.bind('@drumwork/dock/code/javascript/module', file => {\n  const x2 = file.fork('task')\n  const x3 = x2.fork('require')\n  const x4 = x3.fork('base')\n  x4.save('form', 'task')\n  x4.save('name', 'require')\n  const x5 = x4.fork('base')\n  const x6 = x5.fork('0')\n  x6.save('form', 'task-base')\n  x6.save('name', 'path')\n  const x7 = x6.fork('sift')\n  x7.save('form', 'form-link')\n  x7.save('name', 'string')\n  const x8 = x4.fork('zone')\n  const x9 = x8.fork('0')\n  x9.save('form', 'call')\n  x9.save('name', 'call-function')\n  x9.save('wait', false)\n  const x10 = x9.fork('bind')\n  const x11 = x10.fork('0')\n  x11.save('form', 'bind')\n  x11.save('name', 'func')\n  const x12 = x11.fork('sift')\n  x12.save('form', 'sift-text')\n  x12.save('text', 'require')\n  const x13 = x10.fork('1')\n  x13.save('form', 'bind')\n  x13.save('name', 'factor')\n  const x14 = x13.fork('sift')\n  x14.save('form', 'link')\n  const x15 = x14.fork('nest')\n  x15.save('form', 'nest')\n  const x16 = x15.fork('stem')\n  const x17 = x16.fork('0')\n  x17.save('form', 'term')\n  x17.save('name', 'path')\n  const x18 = x9.fork('zone')\n  const x19 = x18.fork('0')\n  x19.save('form', 'call-turn')\n  x19.save('name', 'seed')\n  x9.fork('hook')\n  x4.save('wait', false)\n  x3.save('call', function(path){\n    return __webpack_require__(\"./load/browser sync recursive\")(path)\n  })\n})\n\nbase.link('@drumwork/base/code/dock/browser')\nbase.link('@drumwork/base/test/task/view')\nbase.link('@drumwork/base/test/dock/browser')\n\n\n//# sourceURL=webpack://@drumwork/base/./load/browser/base.js?");

/***/ }),

/***/ "./load/browser sync recursive":
/*!****************************!*\
  !*** ./load/browser/ sync ***!
  \****************************/
/***/ ((module) => {

eval("function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"./load/browser sync recursive\";\nmodule.exports = webpackEmptyContext;\n\n//# sourceURL=webpack://@drumwork/base/./load/browser/_sync?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./load/browser/base.js");
/******/ 	
/******/ })()
;