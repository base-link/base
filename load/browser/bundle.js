/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./load/browser/base.js":
/*!******************************!*\
  !*** ./load/browser/base.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst host = typeof window == 'undefined' ? __webpack_require__.g : window\n\nclass Site {\n  constructor(head, link) {\n    this.head = head\n    this.link = link\n    this.file = undefined\n    this.mesh = {}\n  }\n}\n\nclass File {\n  constructor(road) {\n    this.road = road\n  }\n\n  bind(task) {\n    this.host = task\n  }\n}\n\nclass Base {\n  constructor() {\n    this.mesh = {}\n  }\n\n  load(road) {\n    const list = road.split('/')\n    let size = 0\n    let mesh = this.mesh\n    let site\n    while (size < list.length) {\n      const link = list[size]\n      site = mesh[link] = mesh[link] || new Site(site, link)\n      mesh = site.mesh\n      size++\n    }\n    const file = site.file = site.file || new File(road)\n    return file\n  }\n\n  bind(road, task) {\n    task(this.load(road))\n    return this\n  }\n\n  link(road) {\n    const file = this.load(road)\n    if (file.host) file.host()\n  }\n\n  free(road) {\n    const list = road.split('/')\n    let size = 0\n    let mesh = this.mesh\n    let site\n    while (size < list.length) {\n      const link = list[size]\n      site = mesh[link]\n      if (site) {\n        mesh = site.mesh\n        size++\n      } else {\n        break\n      }\n    }\n    while (site) {\n      const head = site.head\n      delete head.mesh[site.link]\n      if (!Object.keys(head.mesh).length) {\n        site = head\n      } else {\n        break\n      }\n    }\n  }\n}\n\nhost.base = new Base\nbase.bind('@drumwork/dock/code/javascript/module', file => {\n  file.task = {}\n\n  file.task.require = function(path){\n    return __webpack_require__(\"./load/browser sync recursive\")(path)\n  }\n})\n\nbase.bind('@drumwork/base/code/dock/browser', file => {\n  const x1 = base.load('@drumwork/dock/code/javascript/module')\n  let x1_1\n\n  file.task = {}\n\n  file.task.make_base = function(){\n    return rise_base.make()\n  }\n\n  file.task.make = function(type){\n    return rise_make.make(type)\n  }\n\n  file.task.bind_view = function(list, base){\n    rise_mesh.bind(list, base)\n  }\n\n  file.task.draw_view = function(mesh){\n    rise_mesh.draw(mesh)\n  }\n\n  file.task.create_mesh = function(view){\n    return rise_mesh.createMesh(view)\n  }\n  rise_mesh = __webpack_require__(\n    /*! @drumwork/rise.browser.js/view/mesh */ \"./rise/browser/view/mesh/index.js\"\n  )\n  rise_make = __webpack_require__(\n    /*! @drumwork/rise.browser.js/make */ \"./rise/browser/make/index.js\"\n  )\n  rise_base = __webpack_require__(\n    /*! @drumwork/rise.browser.js/base */ \"./rise/browser/base/index.js\"\n  )\n\n  file.bind(() => {\n    x1_1 = x1.task.require\n  })\n})\n\nbase.bind('@drumwork/dock/code/javascript/console', file => {\n  file.task = {}\n\n  file.task.assert = function(assertion, obj1, msg, subst1){\n    console.assert(assertion, obj1, msg, subst1)\n  }\n\n  file.task.clear = function(){\n    console.clear()\n  }\n\n  file.task.count = function(label){\n    console.count(label)\n  }\n\n  file.task.count_reset = function(label){\n    console.countReset(label)\n  }\n\n  file.task.debug = function(obj1, msg, subst1){\n    console.debug(obj1, msg, subst1)\n  }\n\n  file.task.dir = function(object){\n    console.dir(object)\n  }\n\n  file.task.dirxml = function(object){\n    console.dirxml(object)\n  }\n\n  file.task.error = function(obj1, msg, subst1){\n    console.error(obj1, msg, subst1)\n  }\n\n  file.task.group = function(label){\n    console.group(label)\n  }\n\n  file.task.group_collapsed = function(label){\n    console.groupCollapsed(label)\n  }\n\n  file.task.group_end = function(){\n    console.groupEnd()\n  }\n\n  file.task.info = function(obj1, msg, subst1){\n    console.info(obj1, msg, subst1)\n  }\n\n  file.task.log = function(message){\n    console.log(message)\n  }\n\n  file.task.table = function(data, columns){\n    console.table(data, columns)\n  }\n\n  file.task.time = function(label){\n    console.time(label)\n  }\n\n  file.task.time_end = function(label){\n    console.timeEnd(label)\n  }\n\n  file.task.time_log = function(label){\n    console.timeLog(label)\n  }\n\n  file.task.trace = function(any){\n    console.trace(any)\n  }\n\n  file.task.warn = function(obj1, msg, subst1){\n    console.warn(obj1, msg, subst1)\n  }\n})\n\nbase.bind('@drumwork/base/test/view/example', file => {\n  file.view = {}\n\n  file.view.check = {\n    form: 'view',\n    name: 'check',\n    base: [],\n    bond: [],\n    hook: [],\n    zone: [\n      {\n        form: 'mesh',\n        name: 'header',\n        bind: [],\n        vibe: [],\n        zone: [\n          {\n            form: 'mesh',\n            name: 'h2',\n            bind: [\n              {\n                form: 'bind',\n                name: 'text',\n                sift: {\n                  form: 'sift-text',\n                  text: 'foo bar'\n                }\n              }\n            ],\n            vibe: [],\n            zone: [],\n            hook: []\n          },\n          {\n            form: 'mesh',\n            name: 'div',\n            bind: [],\n            vibe: [],\n            zone: [\n              {\n                form: 'mesh',\n                name: 'h3',\n                bind: [\n                  {\n                    form: 'bind',\n                    name: 'text',\n                    sift: {\n                      form: 'sift-text',\n                      text: 'another'\n                    }\n                  }\n                ],\n                vibe: [],\n                zone: [],\n                hook: []\n              }\n            ],\n            hook: []\n          }\n        ],\n        hook: []\n      }\n    ],\n    task: []\n  }\n\n  file.view.example = {\n    form: 'view',\n    name: 'example',\n    base: [],\n    bond: [],\n    hook: [],\n    zone: [\n      {\n        form: 'mesh',\n        name: 'h1',\n        bind: [\n          {\n            form: 'bind',\n            name: 'fill',\n            sift: {\n              form: 'sift-text',\n              text: '#ff0000'\n            }\n          },\n          {\n            form: 'bind',\n            name: 'text-fill',\n            sift: {\n              form: 'sift-text',\n              text: 'white'\n            }\n          },\n          {\n            form: 'bind',\n            name: 'text',\n            sift: {\n              form: 'sift-text',\n              text: 'hello world'\n            }\n          }\n        ],\n        vibe: [\n          {\n            form: 'vibe',\n            name: 'hover',\n            bind: [\n              {\n                form: 'bind',\n                name: 'fill',\n                sift: {\n                  form: 'sift-text',\n                  text: '#00ff00'\n                }\n              }\n            ],\n            hook: []\n          }\n        ],\n        zone: [],\n        hook: [\n          {\n            form: 'hook',\n            name: 'click',\n            base: [\n              {\n                form: 'task-base',\n                name: 'event'\n              }\n            ],\n            zone: [\n              {\n                form: 'call',\n                name: 'log',\n                wait: false,\n                bind: [\n                  {\n                    form: 'bind',\n                    name: 'message',\n                    sift: {\n                      form: 'link',\n                      nest: {\n                        form: 'nest',\n                        stem: [\n                          {\n                            form: 'term',\n                            name: 'event'\n                          }\n                        ]\n                      }\n                    }\n                  }\n                ],\n                zone: [],\n                hook: []\n              }\n            ]\n          }\n        ]\n      },\n      {\n        form: 'mesh',\n        name: 'check',\n        bind: [],\n        vibe: [],\n        zone: [],\n        hook: []\n      }\n    ],\n    task: []\n  }\n\n  file.bind(() => {\n    file.view.check.zone[0].case = file.view.header\n    file.view.example.zone[0].case = file.view.h1\n    file.view.example.zone[1].case = file.view.check\n  })\n})\n\nbase.bind('@drumwork/base/test/task/view', file => {\n  const x1 = base.load('@drumwork/base/test/view/example')\n  const x2 = base.load('@drumwork/dock/code/javascript/console')\n  const x3 = base.load('@drumwork/base/code/dock/browser')\n  const x4 = base.load('@drumwork/base/code/dock/browser')\n  let x1_1\n  let x2_1\n  let x3_1\n  let x3_2\n  let x3_3\n  let x3_4\n  let x4_1\n\n  file.task = {}\n\n  file.task.mount_example_view = function(){\n    b = x3_1(\n\n    )\n    frag = x4_1(\n      x1_1\n    )\n    x2_1(\n      frag\n    )\n    x3_3(\n      frag,\n      b\n    )\n    x3_4(\n      frag\n    )\n    x2_1(\n      'done'\n    )\n  }\n\n  file.bind(() => {\n    x1_1 = x1.view.example\n    x2_1 = x2.task.log\n    x3_1 = x3.task.make_base\n    x3_2 = x3.task.load_view\n    x3_3 = x3.task.bind_view\n    x3_4 = x3.task.draw_view\n    x4_1 = x4.task.make\n  })\n})\n\nbase.bind('@drumwork/base/test/dock/browser', file => {\n  const x1 = base.load('@drumwork/base/test/task/view')\n  let x1_1\n\n  file.bind(() => {\n    x1_1 = x1.task.mount_example_view\n    x1_1()\n  })\n})\n\nbase.link('@drumwork/base/code/dock/browser')\nbase.link('@drumwork/base/test/view/example')\nbase.link('@drumwork/base/test/task/view')\nbase.link('@drumwork/base/test/dock/browser')\n\n\n//# sourceURL=webpack://@drumwork/base/./load/browser/base.js?");

/***/ }),

/***/ "./load/browser sync recursive":
/*!****************************!*\
  !*** ./load/browser/ sync ***!
  \****************************/
/***/ ((module) => {

eval("function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"./load/browser sync recursive\";\nmodule.exports = webpackEmptyContext;\n\n//# sourceURL=webpack://@drumwork/base/./load/browser/_sync?");

/***/ }),

/***/ "./rise/browser/base/index.js":
/*!************************************!*\
  !*** ./rise/browser/base/index.js ***!
  \************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n  make,\n}\n\nfunction createNode(props = {}) {\n  return {\n    id: genUUID(),\n    props\n  }\n}\n\nfunction make() {\n  return {\n    mesh: {},\n    pool: {},\n    view: {},\n    base: {}\n  }\n}\n\nfunction storeNode(store, node) {\n  store.props[node.id] = node\n}\n\nfunction push({ node, property, value, callback }) {\n  node.props[property].push(value)\n  callback('push', { node, property, value })\n}\n\nfunction remove({ node, property, callback }) {\n  delete node.props[property]\n  callback('remove', { node, property })\n}\n\nfunction set({ node, property, value, callback }) {\n  node.props[property] = value\n  callback('set', { node, property, value })\n}\n\n\n//# sourceURL=webpack://@drumwork/base/./rise/browser/base/index.js?");

/***/ }),

/***/ "./rise/browser/make/index.js":
/*!************************************!*\
  !*** ./rise/browser/make/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst makers = {}\n\nconst { make: makeMesh } = __webpack_require__(/*! ../view/mesh */ \"./rise/browser/view/mesh/index.js\")\n\nmodule.exports = {\n  make,\n  register\n}\n\nfunction register(name, maker) {\n  makers[name] = maker\n}\n\nfunction make(type, bind, home) {\n  let ctor\n\n  if (type.form === 'view') {\n    return makeMesh(type)\n  }\n\n  if (path.depth > 1) {\n    ctor = getFromHome(home, path)\n  } else {\n    ctor = getFromHome(home, ['form', ...path])\n  }\n\n  if (!ctor) throw new Error('No constructor found')\n\n  const maker = makers[ctor.name]\n  return maker(bind, home)\n}\n\n\n//# sourceURL=webpack://@drumwork/base/./rise/browser/make/index.js?");

/***/ }),

/***/ "./rise/browser/view/element/index.js":
/*!********************************************!*\
  !*** ./rise/browser/view/element/index.js ***!
  \********************************************/
/***/ ((module) => {

eval("\nconst LIST = [\n  'a',\n  'abbr',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'bdi',\n  'bdo',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'command',\n  'datalist',\n  'dd',\n  'del',\n  'details',\n  'dfn',\n  'div',\n  'dl',\n  'dt',\n  'em',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hr',\n  'html',\n  'i',\n  'iframe',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'keygen',\n  'label',\n  'legend',\n  'li',\n  'main',\n  'map',\n  'mark',\n  'menu',\n  'meter',\n  'nav',\n  'object',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'param',\n  'pre',\n  'progress',\n  'q',\n  'rp',\n  'rt',\n  'ruby',\n  's',\n  'samp',\n  'section',\n  'select',\n  'small',\n  'source',\n  'span',\n  'strong',\n  'sub',\n  'summary',\n  'sup',\n  'table',\n  'tbody',\n  'td',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'tr',\n  'track',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr',\n]\n\nconst STYLE_LIST = [\n  'align-content',\n  'align-items',\n  'align-self',\n  'alignment-adjust',\n  'alignment-baseline',\n  'all',\n  'alt',\n  'animation',\n  'animation-delay',\n  'animation-direction',\n  'animation-duration',\n  'animation-fill-mode',\n  'animation-iteration-count',\n  'animation-name',\n  'animation-play-state',\n  'animation-timing-function',\n  'azimuth',\n  'backface-visibility',\n  'background',\n  'background-attachment',\n  'background-clip',\n  'background-color',\n  'background-image',\n  'background-origin',\n  'background-position',\n  'background-repeat',\n  'background-size',\n  'background-blend-mode',\n  'baseline-shift',\n  'bleed',\n  'bookmark-label',\n  'bookmark-level',\n  'bookmark-state',\n  'border',\n  'border-color',\n  'border-style',\n  'border-width',\n  'border-bottom',\n  'border-bottom-color',\n  'border-bottom-style',\n  'border-bottom-width',\n  'border-left',\n  'border-left-color',\n  'border-left-style',\n  'border-left-width',\n  'border-right',\n  'border-right-color',\n  'border-right-style',\n  'border-right-width',\n  'border-top',\n  'border-top-color',\n  'border-top-style',\n  'border-top-width',\n  'border-collapse',\n  'border-image',\n  'border-image-outset',\n  'border-image-repeat',\n  'border-image-slice',\n  'border-image-source',\n  'border-image-width',\n  'border-radius',\n  'border-bottom-left-radius',\n  'border-bottom-right-radius',\n  'border-top-left-radius',\n  'border-top-right-radius',\n  'border-spacing',\n  'bottom',\n  'box-decoration-break',\n  'box-shadow',\n  'box-sizing',\n  'box-snap',\n  'break-after',\n  'break-before',\n  'break-inside',\n  'buffered-rendering',\n  'caption-side',\n  'clear',\n  'clear-side',\n  'clip',\n  'clip-path',\n  'clip-rule',\n  'color',\n  'color-adjust',\n  'color-correction',\n  'color-interpolation',\n  'color-interpolation-filters',\n  'color-profile',\n  'color-rendering',\n  'column-fill',\n  'column-gap',\n  'column-rule',\n  'column-rule-color',\n  'column-rule-style',\n  'column-rule-width',\n  'column-span',\n  'columns',\n  'column-count',\n  'column-width',\n  'contain',\n  'content',\n  'counter-increment',\n  'counter-reset',\n  'counter-set',\n  'cue',\n  'cue-after',\n  'cue-before',\n  'cursor',\n  'direction',\n  'display',\n  'display-inside',\n  'display-outside',\n  'display-extras',\n  'display-box',\n  'dominant-baseline',\n  'elevation',\n  'empty-cells',\n  'enable-background',\n  'fill',\n  'fill-opacity',\n  'fill-rule',\n  'filter',\n  'float',\n  'float-defer-column',\n  'float-defer-page',\n  'float-offset',\n  'float-wrap',\n  'flow-into',\n  'flow-from',\n  'flex',\n  'flex-basis',\n  'flex-grow',\n  'flex-shrink',\n  'flex-flow',\n  'flex-direction',\n  'flex-wrap',\n  'flood-color',\n  'flood-opacity',\n  'font',\n  'font-family',\n  'font-size',\n  'font-stretch',\n  'font-style',\n  'font-weight',\n  'font-feature-settings',\n  'font-kerning',\n  'font-language-override',\n  'font-size-adjust',\n  'font-synthesis',\n  'font-variant',\n  'font-variant-alternates',\n  'font-variant-caps',\n  'font-variant-east-asian',\n  'font-variant-ligatures',\n  'font-variant-numeric',\n  'font-variant-position',\n  'footnote-policy',\n  'glyph-orientation-horizontal',\n  'glyph-orientation-vertical',\n  'grid',\n  'grid-auto-flow',\n  'grid-auto-columns',\n  'grid-auto-rows',\n  'grid-template',\n  'grid-template-areas',\n  'grid-template-columns',\n  'grid-template-rows',\n  'grid-area',\n  'grid-column',\n  'grid-column-start',\n  'grid-column-end',\n  'grid-row',\n  'grid-row-start',\n  'grid-row-end',\n  'hanging-punctuation',\n  'height',\n  'hyphenate-character',\n  'hyphenate-limit-chars',\n  'hyphenate-limit-last',\n  'hyphenate-limit-lines',\n  'hyphenate-limit-zone',\n  'hyphens',\n  'icon',\n  'image-orientation',\n  'image-resolution',\n  'image-rendering',\n  'ime',\n  'ime-align',\n  'ime-mode',\n  'ime-offset',\n  'ime-width',\n  'initial-letters',\n  'inline-box-align',\n  'isolation',\n  'justify-content',\n  'justify-items',\n  'justify-self',\n  'kerning',\n  'left',\n  'letter-spacing',\n  'lighting-color',\n  'line-box-contain',\n  'line-break',\n  'line-grid',\n  'line-height',\n  'line-slack',\n  'line-snap',\n  'list-style',\n  'list-style-image',\n  'list-style-position',\n  'list-style-type',\n  'margin',\n  'margin-bottom',\n  'margin-left',\n  'margin-right',\n  'margin-top',\n  'marker',\n  'marker-end',\n  'marker-mid',\n  'marker-pattern',\n  'marker-segment',\n  'marker-start',\n  'marker-knockout-left',\n  'marker-knockout-right',\n  'marker-side',\n  'marks',\n  'marquee-direction',\n  'marquee-play-count',\n  'marquee-speed',\n  'marquee-style',\n  'mask',\n  'mask-image',\n  'mask-repeat',\n  'mask-position',\n  'mask-clip',\n  'mask-origin',\n  'mask-size',\n  'mask-box',\n  'mask-box-outset',\n  'mask-box-repeat',\n  'mask-box-slice',\n  'mask-box-source',\n  'mask-box-width',\n  'mask-type',\n  'max-height',\n  'max-lines',\n  'max-width',\n  'min-height',\n  'min-width',\n  'mix-blend-mode',\n  'nav-down',\n  'nav-index',\n  'nav-left',\n  'nav-right',\n  'nav-up',\n  'object-fit',\n  'object-position',\n  'offset-after',\n  'offset-before',\n  'offset-end',\n  'offset-start',\n  'opacity',\n  'order',\n  'orphans',\n  'outline',\n  'outline-color',\n  'outline-style',\n  'outline-width',\n  'outline-offset',\n  'overflow',\n  'overflow-x',\n  'overflow-y',\n  'overflow-style',\n  'overflow-wrap',\n  'padding',\n  'padding-bottom',\n  'padding-left',\n  'padding-right',\n  'padding-top',\n  'page',\n  'page-break-after',\n  'page-break-before',\n  'page-break-inside',\n  'paint-order',\n  'pause',\n  'pause-after',\n  'pause-before',\n  'perspective',\n  'perspective-origin',\n  'pitch',\n  'pitch-range',\n  'play-during',\n  'pointer-events',\n  'position',\n  'quotes',\n  'region-fragment',\n  'resize',\n  'rest',\n  'rest-after',\n  'rest-before',\n  'richness',\n  'right',\n  'ruby-align',\n  'ruby-merge',\n  'ruby-position',\n  'scroll-behavior',\n  'scroll-snap-coordinate',\n  'scroll-snap-destination',\n  'scroll-snap-points-x',\n  'scroll-snap-points-y',\n  'scroll-snap-type',\n  'shape-image-threshold',\n  'shape-inside',\n  'shape-margin',\n  'shape-outside',\n  'shape-padding',\n  'shape-rendering',\n  'size',\n  'speak',\n  'speak-as',\n  'speak-header',\n  'speak-numeral',\n  'speak-punctuation',\n  'speech-rate',\n  'stop-color',\n  'stop-opacity',\n  'stress',\n  'string-set',\n  'stroke',\n  'stroke-dasharray',\n  'stroke-dashoffset',\n  'stroke-linecap',\n  'stroke-linejoin',\n  'stroke-miterlimit',\n  'stroke-opacity',\n  'stroke-width',\n  'tab-size',\n  'table-layout',\n  'text-align',\n  'text-align-all',\n  'text-align-last',\n  'text-anchor',\n  'text-combine-upright',\n  'text-decoration',\n  'text-decoration-color',\n  'text-decoration-line',\n  'text-decoration-style',\n  'text-decoration-skip',\n  'text-emphasis',\n  'text-emphasis-color',\n  'text-emphasis-style',\n  'text-emphasis-position',\n  'text-emphasis-skip',\n  'text-height',\n  'text-indent',\n  'text-justify',\n  'text-orientation',\n  'text-overflow',\n  'text-rendering',\n  'text-shadow',\n  'text-size-adjust',\n  'text-space-collapse',\n  'text-spacing',\n  'text-transform',\n  'text-underline-position',\n  'text-wrap',\n  'top',\n  'touch-action',\n  'transform',\n  'transform-box',\n  'transform-origin',\n  'transform-style',\n  'transition',\n  'transition-delay',\n  'transition-duration',\n  'transition-property',\n  'transition-timing',\n  'unicode-bidi',\n  'vector-effect',\n  'vertical-align',\n  'visibility',\n  'voice-balance',\n  'voice-duration',\n  'voice-family',\n  'voice-pitch',\n  'voice-range',\n  'voice-rate',\n  'voice-stress',\n  'voice-volumn',\n  'volume',\n  'white-space',\n  'widows',\n  'width',\n  'will-change',\n  'word-break',\n  'word-spacing',\n  'word-wrap',\n  'wrap-flow',\n  'wrap-through',\n  'writing-mode',\n  'z-index',\n].reduce((m, x) => {\n  m[x] = true\n  return m\n}, {})\n\nfunction removeFromParent(el) {\n  el.parentNode.removeChild(el)\n}\n\nfunction load(tag, base) {\n  return loadFromPool(tag, base) || make(tag)\n}\n\nfunction loadFromPool(tag, base) {\n  return base.pool[tag] && base.pool[tag].pop()\n}\n\nfunction kill(nativeElement) {\n  let stack = [nativeElement]\n  let els = []\n  while (stack.length) {\n    const el = stack.shift()\n    el.parentNode.removeChild(el)\n    node.handlers.forEach(({ type, handler }) => {\n      el.removeEventListener(type, handler)\n    })\n    Object.keys(el.style).forEach(name => {\n      el.style[name] = undefined;\n    })\n    el.attributes.forEach(attribute => {\n      el.removeAttribute(attribute.name)\n    })\n    el.classList.remove(...el.classList);\n    el.children.forEach(child => {\n      stack.push(child)\n    })\n    els.push(el)\n  }\n  els.forEach(el => {\n    // clear out any remaining text\n    el.innerHTML = ''\n    addNativeElementToPool(el)\n  })\n}\n\nfunction addNativeElementToPool(el, store) {\n  const pool = store.pool[el.tagName] = store.pool[el.tagName] || []\n  if (pool.length < store.maxPoolSize) {\n    pool.push(el)\n  }\n}\n\nfunction make(tag) {\n  return document.createElement(tag)\n}\n\nfunction bind(el, mesh) {\n  for (const name in mesh.attributes) {\n    const value = mesh.attributes[name]\n    el.setAttribute(name, value)\n  }\n  for (const name in mesh.styles) {\n    const value = mesh.styles[name]\n    el.style[name] = value\n  }\n  if (mesh.className) {\n    el.classList.add(mesh.className)\n  }\n  if (mesh.handlers) {\n    mesh.handlers.forEach(handler => {\n      el.addEventListener(handler.type, handler.handle)\n    })\n  }\n  mesh.nativeElement = el\n}\n\nmodule.exports = {\n  removeFromParent,\n  kill,\n  make,\n  bind,\n  load,\n  LIST,\n  STYLE_LIST\n}\n\n\n//# sourceURL=webpack://@drumwork/base/./rise/browser/view/element/index.js?");

/***/ }),

/***/ "./rise/browser/view/mesh/index.js":
/*!*****************************************!*\
  !*** ./rise/browser/view/mesh/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst {\n  LIST: NATIVE_ELEMENT_LIST,\n  STYLE_LIST: NATIVE_ELEMENT_STYLE_LIST,\n  make: makeNativeElement,\n  load: loadNativeElement,\n  bind: bindNativeElement\n} = __webpack_require__(/*! ../element */ \"./rise/browser/view/element/index.js\")\n\nconst STYLE_MAP = {\n  fill: 'background-color',\n  'text-fill': 'color',\n}\n\nmodule.exports = {\n  make,\n  bind,\n  draw,\n}\n\nfunction draw(frag) {\n  frag.forEach(mesh => {\n    document.body.appendChild(mesh.nativeElement);\n  })\n}\n\nfunction make(view, home) {\n  const fragment = []\n  view.zone.forEach(zone => {\n    if (zone.form === 'mesh') {\n      if (NATIVE_ELEMENT_LIST.includes(zone.name)) {\n        // so with forks, we would be specifying the home,\n        // which would tell you how to resolve each linked variable.\n        //\n        // so then a click handler would pass its home link,\n        // which is the context of the element.\n        //\n        // onclick(home, event)\n        //\n        // also, the home is bound to data that might change,\n        // so if the home properties change, the scope changes,\n        // and so the code on in the views should get re-evaluated.\n        const mesh = makeNativeMesh(zone, view, home)\n        fragment.push(mesh)\n      }\n    }\n  })\n  return fragment\n}\n\nfunction bind(fragment, base) {\n  fragment.forEach(mesh => {\n    let stack = [{ node: mesh }]\n    while (stack.length) {\n      const { node, parent } = stack.shift()\n      const el = node.name === 'text'\n        ? document.createTextNode(node.attributes.text)\n        : loadNativeElement(node.tagName, base)\n      if (node.name !== 'text') {\n        bindNativeElement(el, node)\n      }\n      if (parent) {\n        parent.nativeElement.appendChild(el)\n      }\n      if (node.children) {\n        node.children.forEach(childMesh => {\n          stack.push({ node: childMesh, parent: node })\n        })\n      }\n    }\n  })\n}\n\nfunction makeNativeMesh(zone, view, home) {\n  const mesh = {\n    form: 'mesh',\n    name: zone.name,\n    tagName: zone.name,\n    styles: {},\n    staticStyles: [],\n    attributes: {},\n    handlers: [],\n    children: [],\n    className: `x${view.name}`\n  }\n\n  zone.bind.forEach(bind => {\n    const name = STYLE_MAP[bind.name] || bind.name\n    if (NATIVE_ELEMENT_STYLE_LIST[name]) {\n      if (isStaticBinding(bind.sift)) {\n        const value = getBindingValue(bind.sift)\n        mesh.styles[name] = value\n        mesh.staticStyles.push(name)\n      } else {\n\n      }\n    } else if (name === 'tag') {\n      mesh.tagName = getBindingValue(bind.sift)\n    } else if (name === 'text') {\n      mesh.children.push(\n        {\n          form: 'mesh',\n          name: 'text',\n          attributes: {\n            text: getBindingValue(bind.sift)\n          }\n        }\n      )\n    } else if (name === 'children') {\n\n    } else {\n      const value = getBindingValue(bind.sift)\n      mesh.attributes[name] = value\n    }\n  })\n\n  zone.zone.forEach(childZone => {\n    mesh.children.push(makeNativeMesh(childZone, view))\n  })\n\n  zone.hook.forEach(hook => {\n    mesh.handlers.push({\n      type: hook.name,\n      handle: (e) => console.log(e)\n    })\n  })\n\n  return mesh\n}\n\nfunction getBindingValue(sift, formKnit = {}) {\n  switch (sift.form) {\n    case `sift-text`: return sift.text\n    case `text`: return sift.text\n    case `size`: return sift.size\n    case `sift-mark`: return sift.size\n    case `link`: return getLink(sift.nest, formKnit)\n  }\n}\n\nfunction isStaticBinding(sift) {\n  switch (sift.form) {\n    case `sift-text`:\n    case `text`:\n    case `size`:\n    case `sift-mark`:\n      return true\n    case `link`:\n      return false\n    default:\n      throw JSON.stringify(sift)\n  }\n}\n\n\n//# sourceURL=webpack://@drumwork/base/./rise/browser/view/mesh/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./load/browser/base.js");
/******/ 	
/******/ })()
;