
test <form with name>
  host code, <
    form x, take a
    host seed, make x, 10
  >

  have-seed
    move code
    host a, 10

test <form with interpolated name errors>
  form {x}

test <form with interpolated name>
  host x, <a>
  form {x}

test <form with interpolated name with extra on right>
  host x, <a>
  form {x}-bar

test <form with interpolated name with extra on left>
  host x, <a>
  form foo-{x}

test <form with interpolated name with extra on both sides>
  host x, <a>
  form foo-{x}-bar

test <form with task with interpolated call>
  form x
    task log
      call log-{{x}}

  {
    form: 'call',
    name: hold
  }

test <form with task with interpolated nested call>
  form x
    task log
      call a/log-{{x}}

  {
    form: 'call',
    name: hold
  }

# this should still not resolve x until it is called.
test <tree with interpolated global variable>
  form x
    task log
      fuse x
  tree x
    hook bind
      call a/log-{{{x}}}

# this should resolve x at fuse time.
test <tree with interpolated global variable>
  form x
    task log
      fuse x
  tree x
    hook bind
      call a/log-{x}

test <tree generating a form>
  fuse x, <foo>
  tree x
    take name
    hook bind
      form {name}

test <tree generating a form by key>
  fuse x
    text <form>
    text <foo>
  tree x
    take type
    take name
    hook bind
      {type} {name}

test <interpolating a form at the top level>
  {x} foo
  host x, <form>

# name and type must match term constraints
test <interpolating a form and name at the top level>
  {x} {y}
  host x, <form>
  host y, <foo>

test <interpolating a form and name at the top level with fields>
  {x} {y}
    take a
  host x, <form>
  host y, <foo>

test <load and use result in interpolation>
  load ./host
    take host a

  form {a}

test <load with interpolation>
  load ./{x}
    take host {x}

  form {a}

  host x, <a>

test <circular dependencies>
  card c1
    load ./c2
      take host a

    host x, read a
    host b, <b-baz>

  card c2
    load ./c1
      take host b

    host x, read b
    host a, <a-foo>
